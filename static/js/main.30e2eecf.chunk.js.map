{"version":3,"sources":["App.js","index.js"],"names":["App","useState","user","setUser","searchTerm","setSearchTerm","filterAppState","filter","name","first","toLowerCase","includes","last","gender","email","useEffect","console","log","addUserHandler","a","fetch","method","userData","json","userJson","newUser","results","className","Button","clickHandler","id","onRender","phase","actualDuration","memo","onClick","SearchInput","type","placeholder","value","onChange","e","target","UserList","props","map","userObj","idx","UserObject","title","toUpperCase","rootElement","document","getElementById","ReactDOM","render"],"mappings":"0MAGe,SAASA,IACtB,IACA,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAAiBJ,EAAKK,QAC1B,SAACL,GAAD,OACEA,EAAKM,KAAKC,MAAMC,cAAcC,SAASP,EAAWM,gBAClDR,EAAKM,KAAKI,KAAKF,cAAcC,SAASP,EAAWM,gBACjDR,EAAKW,OAAOH,cAAcC,SAASP,EAAWM,gBAC9CR,EAAKY,MAAMJ,cAAcC,SAASP,EAAWM,kBASjDK,qBANmB,WACjBC,QAAQC,IAAI,kBAKQ,CAACb,IAGvB,IAAMc,EAAc,uCAAG,gCAAAC,EAAA,sEACEC,MAtBhB,4BAsB2B,CAChCC,OAAQ,QAFW,cACfC,EADe,gBAIEA,EAASC,OAJX,OAIfC,EAJe,OAKfC,EALe,sBAKDvB,GALC,CAKKsB,EAASE,QAAQ,KAC3CvB,EAAQsB,GANa,2CAAH,qDASpB,OACE,sBAAKE,UAAU,MAAf,UACE,cAACC,EAAD,CAAQC,aAAcX,EAAgBV,KAAM,aAC5C,cAAC,EAAD,CAAaJ,WAAYA,EAAYC,cAAeA,IAEpD,cAAC,WAAD,CACEyB,GAAG,WACHC,SAAU,SAACD,EAAIE,EAAOC,GACpBjB,QAAQC,IAAI,CACVa,KACAE,QACAC,oBANN,SAUE,cAAC,EAAD,CAAU/B,KAAMI,SAMxB,IAAMsB,EAASM,gBAAK,YAA6B,IAA1BL,EAAyB,EAAzBA,aAAcrB,EAAW,EAAXA,KACnC,OAAO,wBAAQ2B,QAASN,EAAjB,SAAgCrB,OAGnC4B,EAAc,SAAC,GAAmC,IAAjChC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACjC,OACE,uBACEG,KAAK,SACL6B,KAAK,OACLC,YAAY,SACZC,MAAOnC,EACPoC,SAAU,SAACC,GAAD,OAAOpC,EAAcoC,EAAEC,OAAOH,WAKxCI,EAAW,SAACC,GAChB,IAAQ1C,EAAS0C,EAAT1C,KACR,OACE,mCACE,qBAAKyB,UAAU,YAAf,SACGzB,EAAK2C,KAAI,SAACC,EAASC,GAClB,OAAO,cAACC,EAAD,CAAsBF,QAASA,GAAdC,WAO5BC,EAAad,gBAAK,YAAkB,IAAfY,EAAc,EAAdA,QACzB,OACE,sBAAKnB,UAAU,cAAf,oBAEImB,EAAQtC,KAAKyC,MAAQ,IAAMH,EAAQtC,KAAKC,MAAQ,IAAMqC,EAAQtC,KAAKI,MAErE,+BACE,6BAAKkC,EAAQjC,OAAOqC,gBACpB,6BAAKJ,EAAQhC,iBCvFfqC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACvD,EAAD,MAEFmD,K","file":"static/js/main.30e2eecf.chunk.js","sourcesContent":["import { useState, useEffect, Profiler, memo } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const api = `https://randomuser.me/api`;\n  const [user, setUser] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const filterAppState = user.filter(\n    (user) =>\n      user.name.first.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.name.last.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.gender.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const effectFunc = () => {\n    console.log(\"effect fired\");\n  };\n\n  // useEffect(effectFunc); // fires the callback when mounting or re-render happens\n  // useEffect(effectFunc, []); // fires the callback when mounting happens\n  useEffect(effectFunc, [searchTerm]); // fires callback when mounting happens,\n  // or value in dependency array changes\n\n  const addUserHandler = async () => {\n    const userData = await fetch(api, {\n      method: \"GET\"\n    });\n    const userJson = await userData.json();\n    const newUser = [...user, userJson.results[0]];\n    setUser(newUser);\n  };\n\n  return (\n    <div className=\"app\">\n      <Button clickHandler={addUserHandler} name={\"Add User\"} />\n      <SearchInput searchTerm={searchTerm} setSearchTerm={setSearchTerm} />\n\n      <Profiler\n        id=\"userlist\"\n        onRender={(id, phase, actualDuration) => {\n          console.log({\n            id,\n            phase,\n            actualDuration\n          });\n        }}\n      >\n        <UserList user={filterAppState} />\n      </Profiler>\n    </div>\n  );\n}\n\nconst Button = memo(({ clickHandler, name }) => {\n  return <button onClick={clickHandler}>{name}</button>;\n});\n\nconst SearchInput = ({ searchTerm, setSearchTerm }) => {\n  return (\n    <input\n      name=\"search\"\n      type=\"text\"\n      placeholder=\"Search\"\n      value={searchTerm}\n      onChange={(e) => setSearchTerm(e.target.value)}\n    />\n  );\n};\n\nconst UserList = (props) => {\n  const { user } = props;\n  return (\n    <>\n      <div className=\"user-list\">\n        {user.map((userObj, idx) => {\n          return <UserObject key={idx} userObj={userObj} />;\n        })}\n      </div>\n    </>\n  );\n};\n\nconst UserObject = memo(({ userObj }) => {\n  return (\n    <div className=\"user-object\">\n      {`${\n        userObj.name.title + \" \" + userObj.name.first + \" \" + userObj.name.last\n      }`}\n      <ol>\n        <li>{userObj.gender.toUpperCase()}</li>\n        <li>{userObj.email}</li>\n      </ol>\n    </div>\n  );\n});\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}